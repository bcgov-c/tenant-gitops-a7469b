# This is a YAML-formatted file.
# Declare variables to be passed into your templates.
#-- global variables, can be accessed by sub-charts.
global:
  #-- the registry where the images are stored. override during runtime for other registry at global level or individual level.
  repository:
  #-- the registry where the images are stored. override during runtime for other registry at global level or individual level. default is ghcr.io
  registry: ghcr.io
  #-- the tag of the image, it can be latest, 1.0.0 etc..., or the sha256 hash
  tag: ~
  #-- turn off autoscaling for the entire suite by setting this to false. default is true.
  autoscaling: true
  #-- global secrets, can be accessed by sub-charts.
  secrets:
    enabled: true
    databasePassword: ~
    databaseUser: ~
    databaseName: ~
    annotation:
      helm.sh/policy: "keep"
  #-- domain of the application, it is required, apps.silver.devops.gov.bc.ca for silver cluster and apps.devops.gov.bc.ca for gold cluster
  domain: "apps.silver.devops.gov.bc.ca"
  #-- the image registry of OpenShift. It is used in conjunction with ImageStreams which is a OpenShift specific resource.
  openshiftImageRegistry: "image-registry.openshift-image-registry.svc:5000"
  #-- the database Alias gives a nice way to switch to different databases, crunchy, patroni ... etc.
  databaseAlias: bitnami-pg # this is the alias for bitnami postgres, change it based on db type(crunchy,patroni...) and alias used in the chart.
  #-- extra annotations for the pod, it is optional and is an object.
  podAnnotations: |
    app.kubernetes.io/timestamp: {{now | toString }}
component:
  enabled: true
  deployment: # can be either a statefulSet or a deployment not both
    enabled: true
  deploymentStrategy:
    type: Recreate
  configmap:
    enabled: true
    data: # below is just for example.
      config.js: |-
        const envConfig = (() => {
          return {
            "VITE_DEPLOY_ENVIRONMENT":"{{ .Release.Name }}-{{ .Release.Namespace }}"
          };
        })();
      config.prod.js: |-
        const envConfig = (() => {
          return {
            "VITE_DEPLOY_ENVIRONMENT":"static"
          };
        })();
  containers:
    - name: frontend
      registry: '{{ .Values.global.registry }}'
      repository: '{{ .Values.global.repository }}' # example, it includes registry and repository
      image: frontend # the exact component name, be it backend, api-1 etc...
      tag: '{{ .Values.global.tag }}' # the tag of the image, it can be latest, 1.0.0 etc..., or the sha256 hash
      securityContext:
        capabilities:
          add: [ "NET_BIND_SERVICE" ]
      env:
        fromValues:
          - name: BACKEND_URL
            value: "http://{{ .Release.Name }}-backend"
          - name: LOG_LEVEL
            value: "info"
        fromLocalConfigmap: # just for example purpose.
          - name: frontend-configmap
            key: config.js
          - name: frontend-prod-configmap
            key: config.prod.js
      ports:
        - name: http
          containerPort: 3000
          protocol: TCP
        - name: http2
          containerPort: 3001
          protocol: TCP
      resources: # this is optional
        limits:
          cpu: 100m
          memory: 150Mi
        requests:
          cpu: 30m
          memory: 50Mi
      readinessProbe:
        httpGet:
          path: /health
          port: 3001
          scheme: HTTP
        initialDelaySeconds: 5
        periodSeconds: 2
        timeoutSeconds: 2
        successThreshold: 1
        failureThreshold: 30
      livenessProbe:
        successThreshold: 1
        failureThreshold: 3
        httpGet:
          path: /health
          port: 3001
          scheme: HTTP
        initialDelaySeconds: 15
        periodSeconds: 30
        timeoutSeconds: 5
  autoscaling:
    enabled: true
    minReplicas: 3
    maxReplicas: 7
    targetCPUUtilizationPercentage: 80 # this percentage from request cpu
    behavior:
      scaleDown:
        stabilizationWindowSeconds: 300
        policies:
          - type: Percent
            value: 10
            periodSeconds: 60
          - type: Pods
            value: 2
            periodSeconds: 60
        selectPolicy: Min
      scaleUp:
        stabilizationWindowSeconds: 0
        policies:
          - type: Percent
            value: 100
            periodSeconds: 30
          - type: Pods
            value: 2
            periodSeconds: 30
        selectPolicy: Max
  service:
    enabled: true
    type: ClusterIP
    ports:
      - name: http
        port: 80
        targetPort: 3000 # the container port where the application is listening on
        protocol: TCP
  route:
    enabled: true
    host: "{{ .Release.Name }}-frontend.{{ .Values.global.domain }}"
    targetPort: http # look at line#164 refer to the name.
  pdb:
    enabled: true
    minAvailable: 2
